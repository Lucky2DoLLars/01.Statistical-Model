rm(list = ls())
data(iris)
x1 = iris$Sepal.Length
x2 = iris$Sepal.Width

knn.index = function(x_data, x_predict, K)
{
   if (!is.matrix(x_predict))
   {
      num_of_predict = 1
   }else{
      num_of_predict = nrow(x_predict)
   }
   
   index.matrix = matrix(NA, nrow = num_of_predict, ncol = K)
   
   for (i in 1 : num_of_predict)
   {
      distance = sqrt(colSums((t(x_data) - x_predict[i, ])^2))
      distance_neighbors = distance[distance %in% sort(distance)[1 : K]]
      if ( length(distance_neighbors) > K )
      {
         neighbors_max = max(distance_neighbors)
      }
      overlap_idx = sample(which(distance == neighbors_max), 1)
      index = distance %in% distance_neighbors
      index_num = which(index)
      index_num = index_num[ !index_num == overlap_idx ]
      index.matrix[i, ] = index_num
   }
   
   return(index.matrix)
}

x_data = cbind(x1, x2)
K = 10
x_predict = matrix(c(6, 3.2), nrow = 1, ncol = 2, byrow = TRUE)
index = knn.index(x_data, x_predict, K)

plot(x1, x2, col = "white")

points(x1[iris$Species == "setosa"], x2[iris$Species == "setosa"],
       col = "red", pch = 2)
points(x1[iris$Species == "versicolor"], x2[iris$Species == "versicolor"],
       col = "blue", pch = 3)
points(x1[iris$Species == "virginica"], x2[iris$Species == "virginica"],
       col = "green", pch = 5)
points(x_predict[1, ][1], x_predict[1, ][2], pch = 4, cex = 2)

for (i in 1 : ncol(index))
{
   arrows(x_predict[1, ][1], x_predict[1, ][2],
          x_data[index[i] ,][1], x_data[index[i] ,][2])
}
