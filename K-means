my_kmeans = function(data, K, iter.max = 50){

  mykmeans = function(data, K, iter.max = 50){
  
  euclid = function(x,y){
    out = sqrt( (sum((x-y)^2)) )
    return(out)
  }
  
  
  data = data.frame(data)
  col_class = sapply(data, class)
  col_class_idx = col_class != "numeric"
  
  if( sum(col_class_idx) != 0 ){
    stop("K-means method does not allow non-numerical variables")
  }
  
  data = as.matrix(data)
  n = nrow(data)
  p = ncol(data)
  
  cluster_old = sample(1:K, n, replace = TRUE)
  
  center_old = matrix(nrow = K, ncol = p)
  for(i in 1:K){
    center_old[i,] = colMeans(data[cluster_old == i, , drop = FALSE])
  }
  
  dist = matrix(nrow = n, ncol = K)
  error = 10
  iter = 1

  while( (iter <= iter.max) & (error >= 10e-15) ){
    
    iter = iter + 1
    
    for(i in 1:K){
      dist[,i] = apply(data, 1, function(x) euclid(x, center_old[i,]))
    }
    
    cluster_new = apply(dist, 1, which.min)
    
    center_new = matrix(nrow = K, ncol = p)
    for(i in 1:K){
      center_new[i,] = colMeans(data[cluster_new == i, , drop = FALSE])
    }
    
    error = sqrt( sum((center_old - center_new)^2))
    
    center_old = center_new
  }
  
  return(list(cluster_new, iter))
}

  result = try(mykmeans(data, K, iter.max))
  while(class(result) != 'list'){
    result = try(mykmeans(data, K, iter.max))
  }
  
  return(result)
}


data = iris[,1:2]
plot(data, col = my_kmeans(data, 3)[[1]], pch=3)
